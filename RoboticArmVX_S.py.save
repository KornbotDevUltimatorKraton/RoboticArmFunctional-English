#Author: Mr. Chanapai Chuadchum 
#Project Name : Robotic Arm VX-S
#Describe: This project is for official Robotic arm controller function software 
#!/usr/bin/env python2 
from nanpy import(ArduinoApi,SerialManager) # Serial Manager  And arduino API function for the hardware communication 
import pyttsx # Speech engine function for the robotic arm 
import os  #  Misselenius Operating system function for the robotic arm recall the python function 
import sys # System  
import serial # Serial function normal function for communicate with the feed back angle 
import math # Mathematic for calculation function on the system 
import matplotlib.plotly as plt # Mat plot for graph plot in the realtime tracking angle 
import microgear.client as microgear # Internet of Thing function  for the system of the robotic arm 
import time # time sleep funcion for the timing control 
from kivy.app import App # import the kivy gui function of the system 
from kivy.clock import Clock 
from kivy.core.window import Window
from kivy.resources import resource_find
from kivy.graphics.transformation import Matrix
from kivy.graphics.opengl import *
from kivy.graphics import *
from objloader import ObjFileLoader
from kivy.logger import Logger
from rotation import SingleRotate
from kivy.uix.widget import Widget
import Tkinter 
import Tkinter as tk 
import ttk 
from Tkinter import* # Import Tkinter to display the window option control mannual 
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
       #Intro openning speech of the arm 
engine = pyttsx.init() # Openning the speech function of the arm 
engine.setProperty('rate',140) #rate of the speech function system functionallize 
engine.say("Roboic Arm version VX-S now operating") # Say intro speech function of the robotic arm 
engine.runAndWait() # System run and wait for the run 
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   # Base serial connection 
try: #Base connection function  
    connectionBase = SerialManager('/dev/ttyACM0',115200) # Serial connection function for the  base joint 
    base = ArduinoApi(connection=connectionBase) # Connection base estrablished
except: 
    print("Serial Base error please reconnect again")
    engine.say("Serial base error please recheck the serial connection")
    engine.runAndWait() 
# Shouder serial connection 
try: #Shoudler connection function  
    connectionShoulder = SerialManager('/dev/ttyACM1',115200) # Seri$
    Shoulder = ArduinoApi(connection=connectionShoulder) # Connection base $
except: 
    print("Serial Shoulder error please reconnect again")
    engine.say("Serial Shoulder error please recheck the serial connect")
    engine.runAndWait() 
# Elbow serial connection 
try: #Elbow connection function  
    connectionElbow = SerialManger('/dev/ttyACM2',115200) # Seri$
    Elbow = ArduinoApi(connection=connectionElbow) # Connection base $
except: 
    print("Serial Elbow error please reconnect again")
    engine.say("Serial Elbow error please recheck the serial connect")
    engine.runAndWait() 
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
              # Hand part connection function 
  #Wrist Rotator Y
try:  # Wrist rotate y  function 
   connnectionWristRotateY = SerialManager('/dev/ttyACM3',115200) 
   WristRotationY = ArduinoApi(connection=connectionWristRotateY) 
except: 
    print("Serial WristRotate Y serial error please check function")
    engine.say("Serial Wrist Rotate y serial error please reconnect")
    engine.runAndWait() 
  #Wrist Rotator X 
try: # Wrist rotate x function 
   connectionWristRotateX = SerialManager('/dev/ttyACM4',115200) 
   WristRotationX = ArduinoApi(connectoin=connectionWristRotateX) 
except: 
   print("Serial WristRotate X serial error please check function")
   engine.say("Serial Write Rotate X serial error please reconnect")
   engine.runAndWait() 
  #Wrist Hand control 
try: # Hand rotate 
   connectionHand = SerialManager('/dev/ttyACM5',115200) 
   Hand = ArduinoApi(connection=connectionHand) 
except: 
   print("Serial Hand connection error please check serial connection")
   engine.say("Serial Hand error please check function")
   engine.runAndWait()  
   # Runing the command to be ready to recieve the command from the IoT function
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        # Joint motor function controller 
        #! These Actuator working continues like the normal motor but control pid by the  imu outside 
def BaseActuator(dir,Step,speed):  # DigitalControl onoff function for the controller
    digitalWrite(2,dir) 
    for movebase in range(0,Step): 
        digitalWrite(3,base.HIGH)
        time.sleep(speed) 
        digitalWrite(3,base.LOW) 
        
def ShoulderActuator(dir,Step,Speed): 
    digitalWrite(4,dir) 
    for moveShoulder in range(0,Step): 
        digitalWrite(5,Shoulder.HIGH) 
        time.sleep(speed) 
        digitalWrite(5,Shoulder.LOW)
def ElbowActuator(dir,Step,Speed): 
    digitalWrite(6,dir) 
    for moveElbow in range(0,Step): 
        digitalWrite(7,Elbow.HIGH)  
        time.sleep(Speed) 
        digitalWrite(7,Elbow.LOW)
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
         #Upper body wrist hand and finger function 
def WristRotationYActuator(dir,Step,Speed):  # Wrist Rotation Y 
    digitalWrite(2,dir) 
    for moveWRY in range(0,Step): 
         digitalWrite(3,WristRotateY.HIGH)     
         time.sleep(Speed) 
         digitalWrite(3,Hand.LOW)
def WristRotationXActuator(dir,Step,Speed): #Wrist Rotation X 
    digitalWrite(2,dir)  
    for moveWRX in range(0,Step): 
        digitalWrite(3,Hand.HIGH)
        time.sleep(Speed) 
        digitalWrite(3,Hand.LOW) 
def WristRotationActuator(dir,Step,Speed): #Wrist Rotation  on the hand function  
    digitalWrite(2,dir) 
    for moveWR in range(0,Step):
      digitalWrite(3,Hand.HIGH) 
      time.sleep(Speed) 
      digitalWrite(3,Hand.HIGH) 
def Finger2US(dir,Step,Speed): 
    digitalWrite(2,dir) 
    for moveF2 in range(0,Step):
       digitalWrite(3,Hand.HIGH) 
       time.sleep(Speed) 
       digitalWrite(3,Hand.LOW)       
def Finger3US(dir,Step,Speed):
    digitalWrite(4,dir) 
    for moveF3 in range(0,Step):
       digitalWrite(5,Hand.HIGH) 
       time.sleep(Speed) 
       digitalWrite(5,Hand.LOW) 
    # Finger function servo actuator and feed back real time feedback function 
def Finger1Actuator(AngleFinger1):
    analogWrite(8,AngleFinger1)
def Finger2Actuator(AngleFinger2): 
    analogWrite(9,AngleFinger2) 
def Finger3Actuator(AngleFinger3): 
    analogWrite(10,AngleFinger3)
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
       



#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
       #Manual mode controller 

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
       # Kinematic function for the Arm controller (X,Y,Z) Euler frame 
def Kinmaticinput(x,y,z):   # Input the 3 parameters axis to the sistem 
   
    


#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      # Looping iteration recieving and sending the command
while(True): 
      #Master = Tkinter.Tk() # Tkinter window initiated when Trigger window working 
      AngleBase  = base.analogRead(0) 
      AngleShoulder = Shoulder.analogRead(1) 
      AngleElbow = Elbow.analogRead(2) 
      AngleWristRotatey = WristRotationY.analogRead(3) 
      AngleWristRotatex = WristRotationX.analogRead(4)
      #Hand parts function control  
      AngleWrist = Hand.analogRead(5)  # Wrist at the hand to rotate around 
      AngleHand = Hand.analogRead(6)   
      #Finger function for the Robotic hand controller   
      Finger1feed = Hand.analogRead(7) # Finger function for the force sensor feeb$
      Finger2feed = Hand.analogRead(8) 
      Finger3feed = Hand.analogRead(9) 
      print(AngkeBase,AngleShoulder,AngleElbow,AngleWristRotatey,AngleWristRotatexmAngleWrist,AngleHand,Finger1feed,Finger2feed,Finger3feed) # Angle feed back from the body sensors translator 

 

